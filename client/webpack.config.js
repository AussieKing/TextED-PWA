const HtmlWebpackPlugin = require('html-webpack-plugin');
const WebpackPwaManifest = require('webpack-pwa-manifest');
const path = require('path');
const { InjectManifest } = require('workbox-webpack-plugin');

// TODO: Add and configure workbox plugins for a service worker and manifest file.
// TODO: Add CSS loaders and babel to webpack.

module.exports = () => {
  return {
    mode: 'development',
    entry: {   // This is the entry point or start of the react app
      main: './src/js/index.js',
      install: './src/js/install.js'
    },
    output: {   // This is where the bundled code will go
      filename: '[name].bundle.js',
      path: path.resolve(__dirname, 'dist'),
    },
    plugins: [
    // need to generate the html file that will be used by the browser to load the react app
    new InjectManifest({   // This is the plugin that will generate the service worker file
      swSrc: './src/js/sw.js',  // This is the file where we will write our service worker code
      swDest: 'sw.js',  // This is the file that will be generated by webpack
    }),
    new HtmlWebpackPlugin({   // This is the plugin that will generate the html file for us and inject the bundled code into it
      template: './src/index.html',  // This is the file that we will use as a template
      filename: 'index.html',  // This is the file that will be generated
    }),
    new WebpackPwaManifest({   // This is the plugin that will generate the manifest file for us and inject the bundled code into it
      name: 'Notes Tracker',
      short_name: 'Tracker',
      description: 'An application that allows you to track your thoughts with notes',
      background_color: '#ffffff',
      theme_color: '#ffffff',
      start_url: '/',  
      publicPath: '/',
      fingerprints: false,
      inject: true,
      icons: [
        {
          src: path.resolve('src/images/logo.png'),  
          sizes: [96, 128, 192, 256, 384, 512],  // multiple sizes for different devices
          destination: path.join('assets', 'icons'),  // destination folder for the icons
        },
      ],
    }),
  ],

    //! Adding a rule for babel-loader to transpile our code to work in older browsers and for css-loader to load our css files into the app 
    module: {
      rules: [
        {
          test: /\.css$/,  // This tells webpack to look for all files that end in .css via a regular expression
          use: ['style-loader', 'css-loader'],   // This tells webpack to use the css-loader first, then the style-loader
        },
        {
          test: /\.js$/,   // This is a regular expression that tells webpack to look for all files that end in .js
          exclude: /node_modules/,   // ignore the node_modules folder
          use: {
            loader: 'babel-loader',   // This is the name of the actual loader to be used
            options: {
              presets: ['@babel/preset-env', '@babel/preset-react'],   // These are the options/parameters for the loader
              plugins: ['@babel/plugin-proposal-oblject-rest-spread', '@babel/transform-runtime'],
            },
          },
        },
      ],
    },
  };
};
